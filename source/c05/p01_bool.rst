=======================
布尔数据类型与相关操作
=======================

----------
目标
----------

- 学习什么是布尔数据类型

--------------------------
逻辑（bool）类型简介
--------------------------

bool表示布尔型变量，也就是逻辑型变量的定义符，以英国数学家、布尔代数的奠基人乔治·布尔（George Boole）命名。
乔治·布尔发明了逻辑值以及逻辑值之间的运算体系。
对于布尔值，只有两种结果即True和False，其分别对应与二进制中的1和0。
True和False也是python语言中的关键字。

bool仅包含真(True)/假(False)两个值，0为False，非0为True。在逻辑值运算中为：``非真既假``。



------------------------
如何判断一个表达式的真假
------------------------

表达式本身也是有真假的值，那么如何判断一个普通的python表达式的真假呢？

我们用内置的``bool()``函数，来判断一个python表达式的真假。

其实再python中，表达式为真即True的值太多了，我们只需要了解假即Flase的值有哪些：None、空（即 空的字符串，列表，元组，字典等）、0；

.. code-block:: console

   #以下结果为假，即None、‘’、[]、()、{}以及 0
   >>> bool(None)
   False
   >>> bool('')
   False
   >>> bool([])
   False
   >>> bool(0)
   False
   >>> bool(())
   False
   >>> bool({})
   False


------------------------
数值的比较
------------------------

数值的比较也是在科学实践当中，经常使用的一个场景，比较两个数值的大小，类似于数学课本里的“不等式”。


================ ================================================================================== ===============================================================
运算符                                                           描述                                                                                                                                                                                       实例               
================ ================================================================================== ===============================================================
``==``           判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)           如a=3,b=3，则（a == b) 为 True   
``!=``           不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)              如a=3,b=3，则（a == b) 为 True如a=1,b=3，则(a != b) 为 True  
``>``            运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假                                       如a=7,b=3，则(a > b) 为 True                                 
``<``            运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假                                       如a=7,b=3，则(a < b) 为 False                                
``>=``           运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假                                 如a=7,b=3，则(a < b) 为 False如a=3,b=3，则(a >= b) 为 True   
``<=``           运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假                                如a=3,b=3，则(a <= b) 为 True                                
================ ================================================================================== ===============================================================

**简单实例**

.. code-block:: python

   a = 7
   b = 5
   print(a == b)  # False
   print(a != b)  # True
   print(a < b)   # False
   print(a > b)   # True
   print(a <= b)  # False
   print(a >= b)  # True

.. note:: 

    这里面实际上隐含了对bool()函数的调用，本身就是两个数值的比较，程序解释器可以理解人的意思是比较大小得出逻辑结论，所以不用加bool函数也可以。

.. note:: 

    双等号问题，在编程的世界里，单一等号一般表示赋值，双等号一般表示比较操作，获取逻辑结果。

--------------------------------------------------
字符串，列表，元组，字典判断成员存在性
--------------------------------------------------
 
**in**

判断指定数据在某个列表序列，如果在返回True，否则返回False

.. code-block:: python

   name_list = ['Tom', 'Lily', 'Rose']
   
   # 结果：True
   print('Lily' in name_list)
   
   # 结果：False
   print('Lilys' in name_list)


**not in**

判断指定数据不在某个列表序列，如果不在返回True，否则返回False

.. code-block:: python

   name_list = ['Tom', 'Lily', 'Rose']
   
   # 结果：False
   print('Lily' not in name_list)
   
   # 结果：True
   print('Lilys' not in name_list)


**案例**

需求：查找用户输入的名字是否已经存在。

.. code-block:: python

   name_list = ['Tom', 'Lily', 'Rose']
   
   name = input('请输入您要搜索的名字：')
   
   if name in name_list:
       print(f'您输入的名字是{name}, 名字已经存在')
   else:
       print(f'您输入的名字是{name}, 名字不存在')


----------------
bool值的运算
----------------

python中的bool运算，
=========== ==================== ========================================================================== ================================================
运算符              逻辑表达式                          描述                                                                                                                                                            实例
=========== ==================== ========================================================================== ================================================
and           x and y               布尔"与"：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。                            True and False， 返回 False。             
or            x or y                布尔"或"：如果 x 是 True，它返回 True，否则它返回 y 的值。                                              False or True， 返回 True。     
not           not x                 布尔"非"：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。                         not True 返回 False, not False 返回 True。
=========== ==================== ========================================================================== ================================================
 
简单实例：
 
.. code-block:: python

   a = 1
   b = 2
   c = 3
   print((a < b) and (b < c))  # True
   print((a > b) and (b < c))  # False
   print((a > b) or (b < c))   # True
   print(not (a > b))          # True

**优先级**

 其一, 在不加括号时候, and优先级大于or
 其二, x or y 的值只可能是x或y.  x为真就是x, x为假就是y
 其三, x and y 的值只可能是x或y.  x为真就是y, x为假就是x

看几个实际的例子：

.. code-block:: python

   >>> 5 and 6 and 7
   7
   >>> 4 and 5 or 6 and 7
   5
   >>> True or True and False
   True
   >>>



------------
思考与练习
------------

进行复杂的逻辑嵌套和长表达式练习

------------
你学到了什么
------------












